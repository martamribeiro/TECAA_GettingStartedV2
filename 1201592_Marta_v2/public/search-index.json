[{"content":"Well-thought-through product announcements will help increase feature awareness and engage users with new functionality. Just like sharing your public roadmap, it\u0026rsquo;s also a great way to let potential customers see that you\u0026rsquo;re constantly improving.\nFurther reading Read How to announce product updates and features ","date":"2023-09-07","id":0,"permalink":"/blog/example-post/","summary":"You can use blog posts for announcing product updates and features.","tags":[],"title":"Example Post"},{"content":"","date":"2023-09-07","id":1,"permalink":"/blog/","summary":"","tags":[],"title":"Blog"},{"content":"","date":"2024-04-22","id":2,"permalink":"/docs/starthere/about/","summary":"","tags":[],"title":"About"},{"content":"","date":"2023-09-07","id":3,"permalink":"/docs/starthere/","summary":"","tags":[],"title":"Start Here"},{"content":"In this page you will learn the first steps to create your first website with Hugo, using the Doks theme.\nInstall Hugo and Go Hugo Start by installing Hugo on your device. Clicking on this link you can check the installation guidelines for macOS, LINUX, Windows, BSD, and any other machine that can run the Go compiler tool chain.\nAfter installing Hugo, you should run the following command:\nWindows MAC choco install hugo-extended brew install hugo Then, check the version you are using with the following command:\nhugo version\rGo Now it\u0026rsquo;s time to install Go. Clicking on this link you can install the Go version you prefer, for your operative system.\nThen, check the version you are using with the following command:\ngo version\rCreate your Project Now, you\u0026rsquo;ll need to create a new project with the Doks theme.\nCreate a new project The recommended way to create a new Hyas + Doks project is by running the command below in your terminal, in the directory where you want to create your project:\nnpm\rpnpm\rYarn\rnpm create hyas@latest -- --template doks\rpnpm create hyas@latest --template doks\ryarn create hyas@latest --template doks\rThis will create a new project directory with all the necessary files and configurations for your site.\nInstall dependencies cd into your new project directory and install the dependencies before continuing.\nnpm\rpnpm\rYarn\rnpm install\rpnpm install\ryarn install\rVisualize your project Now that you have your project created, it\u0026rsquo;s time to visualize it. When working locally, Hugo’s development server lets you preview your work and automatically refreshes your browser when you make changes. Inside your project directory, run the following command to start the development server:\nnpm\rpnpm\rYarn\rnpm run dev\rpnpm dev\ryarn dev\rThis will log a message to your terminal with the URL of your local preview. Open that URL to start browsing your site.\nCongratulations, you finished the first steps to create your first website with Hugo, using the Doks theme!\nHow this page was done This Callout exist for the purpose of explaining how this page was made, as requested for the TECAA course.\nHeaders\rHeaders were strategically employed throughout the \u0026ldquo;Getting Started\u0026rdquo; page to delineate different sections and guide readers through the installation process.\nBy using headers such as \u0026ldquo;Install Hugo and Go\u0026rdquo;, \u0026ldquo;Create your project\u0026rdquo;, and \u0026ldquo;Visualize your project\u0026rdquo;, the content is logically organized, making it easier for users to navigate and understand each step involved in creating their first website with Hugo and the Doks theme.\nHeaders are denoted by one or more hash symbols # followed by a space and the header text. The number of hash symbols determines the level of the header, with one hash symbol # representing the highest level (H1), two hash symbols ## representing the second level (H2), and so on.\nExample:\n# Header 1 ## Header 2 ### Header 3\rTabs\rTabs were utilized within the installation steps to provide separate instructions for different package managers. This approach ensures that readers can quickly access the instructions relevant to them without being overwhelmed by unnecessary information.\nTabs are implemented using shortcodes. They allow users to switch between different sets of information within a single section of content.\nExample:\nTables\rTables were incorporated to present installation commands for different operating systems. Tables allow for easy comparison between installation options, enabling users to choose the method that best suits their preferences and requirements.\nTables are created using pipe symbols | to separate columns and hyphens - to define the table headers. Each row represents a separate entry in the table, with cells separated by pipe symbols.\nExample:\n| Windows | MAC | | :----: | :----: | | ``` choco install hugo-extended``` | ``` brew install hugo``` |\rHyperlinks\rHyperlinks were strategically inserted throughout the page to provide easy access to external resources and relevant documentation. By including hyperlinks to the official Hugo installation page and the Go download page, users can quickly access additional information and resources to assist them in the installation process.\nHyperlinks are created using the syntax [link text](URL), where link text represents the clickable text displayed to users and URL specifies the destination.\nExample:\n[this link](https://gohugo.io/installation/)\rCode Blocks\rCode blocks were used to display commands. By presenting commands in a structured and formatted manner, users can easily identify and execute them. Additionally, code blocks allow for easy copy-and-paste functionality, enabling users to replicate the commands accurately and efficiently.\nCode blocks are enclosed within triple backticks (```).\nExample:\nCallout\rIn the end of the page, a Callout was included to explain how the page was created. This Callout provides important information that can be useful for the users once they start working on their own pages.\nCallouts are implemented using custom shortcodes. They are used to draw attention to specific information or provide additional context.\nExample:\nFigures\rIn the callout section, figures were included to visually represent examples of how different elements were implemented in the \u0026ldquo;Getting Started\u0026rdquo; page, especially the ones that could not be put inside code block, for formatting reasons.\nExample:\nBy strategically incorporating headers, tabs, tables, hyperlinks, code blocks, callouts, and figures throughout the \u0026ldquo;Getting Started\u0026rdquo; page, the content is effectively organized, presented, and explained to users. Each element serves a specific purpose in guiding users through the installation process and providing them with the necessary information and resources to create their first website with Hugo and the Doks theme.\n","date":"2024-04-23","id":4,"permalink":"/docs/starthere/getting-started/","summary":"In this page you will learn the first steps to create your first website with Hugo, using the Doks theme.","tags":[],"title":"Getting Started"},{"content":" Ready to build and deploy your Doks site? Follow one of the guides available on HyasDocs to different deployment services or scroll down for general guidance about deploying a Hyas site.\nDeployment Guides Netlify\rVercel\rGitHub Pages\rGitLab Pages\rCloudflare Pages\rFirebase Hosting\rMicrosoft Azure\rRender\rQuick Deploy Options You can build and deploy a Hyas site (including a Doks themed one) to a number of hosts quickly using either their website’s dashboard UI or a CLI.\nWebsite UI A quick way to deploy your website is to connect your Hyas project’s online Git repository (e.g. GitHub, GitLab, Bitbucket) to a host provider and take advantage of continuous deployment using Git.\nThese host platforms automatically detect pushes to your Hyas project’s source repository, build your site and deploy it to the web at a custom URL or your personal domain. Often, setting up a deployment on these platforms will follow steps something like the following:\nAdd your repository to an online Git provider (e.g. in GitHub, GitLab, Bitbucket)\nChoose a host that supports continuous deployment (e.g. Netlify or Vercel) and import your Git repository as a new site/project. Many common hosts will recognize your project as a Hyas site, and should choose the appropriate configuration settings to build and deploy your site as shown below. (If not, these settings can be changed.)\nDeploy Settings\nBuild Command: hyas build or npm run build Publish directory: public Click “Deploy” and your new website will be created at a unique URL for that host (e.g. new-hyas-site.netlify.app). The host will be automatically configured to watch your Git provider’s main branch for changes, and to rebuild and republish your site at each new commit. These settings can typically be configured in your host provider’s dashboard UI.\nCLI Deployment Some hosts will have their own command line interface (CLI) you can install globally to your machine using npm. Often, using a CLI to deploy looks something like the following:\nInstall your host’s CLI globally, for example: npm\rpnpm\rYarn\rnpm install --global netlify-cli\rpnpm add --global netlify-cli\ryarn global add netlify-cli\rRun the CLI and follow any instructions for authorization, setup etc.\nBuild your site and deploy to your host\nMany common hosts will build and deploy your site for you. They will usually recognize your project as a Hyas site, and should choose the appropriate configuration settings to build and deploy as shown below. (If not, these settings can be changed.)\nDeploy Settings\nBuild Command: hyas build or npm run build Publish directory: public Other hosts will require you to build your site locally and deploy using the command line.\nBuilding Your Site Locally Many hosts like Netlify and Vercel will build your site for you and then publish that build output to the web. But, some sites will require you to build locally and then run a deploy command or upload your build output.\nYou may also wish to build locally to preview your site, or to catch any potential errors and warnings in your own environment.\nRun the command npm run build to build your Hyas site.\nnpm\rpnpm\rYarn\rnpm run build\rpnpm run build\ryarn run build\rBy default, the build output will be placed at public/. This location can be changed using the publishDir configuration option.\nPreviewing Your Site Locally Next to Hugo’s built-in development server, Hyas ships with http-server, a simple, zero-configuration command-line static HTTP server.\nRun the command npm run preview to preview your Hyas site.\nnpm\rpnpm\rYarn\rnpm run preview\rpnpm run preview\ryarn run preview\rThe http-server script is configured to run with gzip, brotli, and CORS enabled. These settings can be changed using the available options.\nHow this page was done\nThis Callout exist for the purpose of explaining how this page was made, as requested for the TECAA course.\nDocument Sections As can be seen on the Table of Contents available on the left side of the page, this document is divided into various sections. This can be achieved in our Doks Theme by making use of markdown headers, by adding # before the text I want to make as a Header. The more # added before a text define their type. For example, # Header1 defines a h1 Header, ## Header2 defines a h2 header, and so on. On this page was done the following:\n## Deployment Guides {#section-1} ## Quick Deploy Options {#section-2} ### Website UI {#section-2.1} ### CLI Deployment {#section-2.2} ## Building Your Site Locally {#section-3} ## Previewing Your Site Locally {#section-4}\rFor each section was also defined a {section-x}. This was implemented in order to be able to reference these sections on hyperlinks, to be explored further.\nThematic Breaks (Horizontal Lines) To create a horizontal line in order to divide the page\u0026rsquo;s content or even Header from the text, as can be seen right after the page\u0026rsquo;s main Title, one can use three or more consecutive hyphens, underscores or asterisks. For this page --- (triple hyphens) was used to create the thematic breaks, like the following one:\nBold Text For the text that can be seen in bold, in the middle of phrases, this could be achieved by placing ** before and after the text desired to be in bold. For example, this is in bold by doing **this**.\nLink Cards To create the Development Guides section Link-Cards and Card-Grids were used. This is the feature our team presented in the Hands-On for TECAA. Each row of Cards was created by using Card-Grids, and each column of that row using a Link-Card, as can be seen in here:\nHyperlinks Every hyperlink found within this page was done by using whats default for markdown files, [Link Text](URL). Here, hyperlinks where used in too different ways:\nTo redirect to another page or website, for example for the Hyas Documentation, the following was done:\n[Netlify](https://docs.gethyas.com/guides/deploy/netlify/)\nTo redirect to a section inside this page the added text to the titles, {section-x}, was used:\n[preview your site](#section-4)\nLists This page presents two different types of lists, ordered ones and unordered ones. To create the ordered lists, present in many of the sections of this page, the following was done:\n1. Item 1 2. Item 2 3. Item 3\rTo create the unordered lists, instead of using numbers followed by a dot a hyphen was used, just like what happens in markdown files:\n- Item 1 - Item 2 - Item 3\rCallouts The use of Callouts were and idea brought about from a Hands-On presented by another TECAA team. While Callouts are not created in the same way in this Doks themed site, they do the same and look similar. To create the Callouts used in this page, including the one used for this section, the following was done:\nBy changing the attributes we can create other types of callouts, changing its colour, title and even associated icon, as can be seen in the examples below:\nInline Code Formatting Along this page there can be seen two different types of formatting for highlithing commands and bash code.\nFor small pieces of code or commands that I want to display in the middle of a phrase, I used ´ between the text to format. For example, to get npm run preview, I did the following with backticks:\n´npm run preview´\rFor larger pieces of code or commands, and to create a larger box as can be seen in the example above, there are two different styles that can be implemented. To make a box similar to a bash command line, I did the following using triple backticks:\n```bash Text Here ```\rThis results in:\nText Here\rTo create a box that resembles and works like a markdown file, like the one I\u0026rsquo;m using here, I substituted the \u0026ldquo;bash\u0026rdquo; option in the formula with \u0026ldquo;markdown\u0026rdquo;:\n```markdown Text Here ```\rResulting in:\nText Here\rTabs Tabs were used along the page to showcase the same commands for different terminals (command lines). To create the tabs, I used the \u0026ldquo;tabs\u0026rdquo; and \u0026ldquo;tab\u0026rdquo; shortcodes, as can be seen in the following example:\nImages The images used along the page, and in the rest of the website as matter of fact, are stored in the assets folder of our project:\nThe file module.toml keeps track of the assets folder:\nImages were used in this page only in the current section to showcase code lines. The images were implemented like can be seen here:\n","date":"2024-04-22","id":5,"permalink":"/docs/starthere/deployment/","summary":"Ready to build and deploy your Doks site? Follow one of the guides available on HyasDocs to different deployment services or scroll down for general guidance about deploying a Hyas site.","tags":[],"title":"Deployment"},{"content":"","date":"2024-04-22","id":6,"permalink":"/docs/guides/","summary":"","tags":[],"title":"Guides"},{"content":"This page is dedicated to show you the customization power of Doks. All of the features down below were used in the development of this website. You can also visit the Doks Documentation for more information and available features we didn\u0026rsquo;t get to use.\nSince Doks is a theme still in development, demonstration resources are not common and very easy to find.\nDoks\u0026rsquo;s System Costumization in doks is made through the assets/scss files available once you build the initial doks project:\n_variables.scss: As the name implies, this file is to be used for variable declarations for later use and to avoid repetition of styles in the main costumization file. Doks already brings with it some custom variables like $primary, but gives you the freedom of creating your own variables. _custom.scss: This is the main file for your custom styles. You can choose to write CSS or SCSS. Furthermore, it also has access to the variables created on the variables files. If you wish, you can also create other SCSS files, which with their own purpose, and connect to this file. Doks let\u0026rsquo;s you override every variable already predefined.\nFonts Doks enables you to customize the type of font and weight/size associated to the different elements present in the pages. Its makes use of two methods for font definition:\nSystem fonts Google fonts System fonts The use of system fonts ensures faster loading of the documentation because i does not require extra time and bandwith to dowload font files\nIf you want to add system fonts to your project, add those in the assets/scss/common/_variables-custom.scss:\n// you can choose which fonts are recognizable $font-family-sans-serif: \u0026#34;Noto Sans\u0026#34;, \u0026#34;Liberation Sans\u0026#34;, Arial, sans-serif;\rGoogle fonts In alternative to using system fonts, you can also make use of Google Fonts. The recommended usage is to self-host the fonts with a tool like google-webfonts-helper or Fontsource.\nNormally speaking, Google fonts can offer a wider range of options for each font available. You can set initial font-weight, font type (serif or not), type of chartset and more. Google fonts offers you more control right of the bat compared to system fonts that are limited to what is installed and loaded already.\nFor example let\u0026rsquo;s try and use the \u0026ldquo;Montserrat\u0026rdquo; font:\nVisit google-webfonts-helper, and select Montserrat. You have a good amount of options to choose. We\u0026rsquo;ll go with \u0026ldquo;lating, \u0026ldquo;regular\u0026rdquo; and \u0026ldquo;500\u0026rdquo;. Copy CSS (using only the prefix /fonts/montserrat) as past on assets/scss/common/_custom.scss: // don\u0026#39;t forget to change the font weight to your preference. /* montserrat500-regular - latin */ @font-face { font-display: swap; /* Check https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/font-display for other options. */ font-family: \u0026#39;Montserrat\u0026#39;; font-style: normal; font-weight: 500; src: url(\u0026#39;../fonts/montserrat-v26-latin-regular.woff2\u0026#39;) format(\u0026#39;woff2\u0026#39;); /* Chrome 36+, Opera 23+, Firefox 39+, Safari 12+, iOS 10+ */ }\rDownload files, extract and paste fonts in static/fonts/montserrat/ Add to assets/scss/common/_variable-custom.scss // you can choose which fonts are recognizable $font-family-sans-serif: \u0026#34;Montserrat\u0026#34;, \u0026#34;Noto Sans\u0026#34;, \u0026#34;Liberation Sans\u0026#34;, Arial, sans-serif;\rPreload the fonts to avoid Cumulative Layout Shift: copy to node_modules/@hyas/doks-core/layouts/partials/head/resource-hints.html to layouts/partials/head/resource-hints.html and add the font: \u0026lt;link rel=\u0026#34;preload\u0026#34; href=\u0026#34;{{ \u0026#34;fonts/montserrat/montserrat-v26-latin-regular.woff2\u0026#34; | absURL }}\u0026#34; as=\u0026#34;font\u0026#34; type=\u0026#34;font/woff2\u0026#34; crossorigin\u0026gt; \u0026lt;link rel=\u0026#34;preload\u0026#34; href=\u0026#34;{{ \u0026#34;fonts/montserrat/montserrat-v26-latin-500.woff2\u0026#34; | absURL }}\u0026#34; as=\u0026#34;font\u0026#34; type=\u0026#34;font/woff2\u0026#34; crossorigin\u0026gt;\rFont size Doks has a good amount of custom variables for you to use, but it still hands you de power of custom styles, that could be written in SCSS or CSS. We can use the powers of Doks to make our job easier to maintain a consistent design theme to our pages\nAs talked before, you can define variables for font size in the _variables-custom.scss, or just write your styles directly into _custom.scss.\nA simple example would be:\n// set a base font size :root { --base-font-size: 1.5rem; }\r// h1 size according to the predefined variable h1 { font-size: calc(var(--base-font-size) + 1.5vw); } // h2 size is defined directly in the file h2 { font-size: 2rem; }\rFonts normally come with specific weight values as Google font recalls. Still, doks lets you change the font weight with simple CSS:\n// change roots font weight :root { font-weight: 700; // change to the desired weight }\rColor Theme Editing the colors around the doks theme ends up following the same principal of creating your own CSS or SCSS styles and dump them into the _custom.scss file.\nSimilarly to the font customization, you can set predefined variables that help you maintain a cosistent look to your website. The Doks theme already comes with predefined variables you can also make use alongside your own variables:\n// change the hover color of links a:hover { color: #b5dec8; }\rYou are given completely freedom of what to change. We incentivize you to experiment further and create your own color themes.\nCheck your HTML\nCheck your generated HTML file when you wish to change a very specific part of the doks document. Along with the material you write, the HTML also contains the classes it uses for the styling.\nShortcodes Doks supports the use of shortcodes in the page\u0026rsquo;s markdowns.\nShortcodes are a neat way of incorporating HTML with your Markdowns. To use a shortcode you need to encapsulate the html between {{}}.\nShortcodes can offer a variety of functionalities, though doks mostly uses them as navigation links.\nThere are a many types of specific shorcodes, which we will cover in this guide.\nYou can follow a more in depth guide of shortcodes at Doks: Shortcodes\nCallouts Callouts are used to give additional information, like notes or warnings the user should take into consideration.\nCallouts can be creates with a title, context and icon associations. Callout contexts fall into four different and straightforward types: note, tip, warning and caution.\nNote\nUsed for additional notes.\nTip\nUsed for extra interesting tips you might want to give\nCaution\nAlert the user about a possible bug or roadblock.\nDanger\nAlert the user to possible problem.\nThe basic syntax for these elements are as follows:\n\u0026lt;callout context title icon\u0026gt;\u0026lt;/callout\u0026gt;\rAs reinforced earlier, you can customize these callouts as much as you want but it isn\u0026rsquo;t advised to do so, has they serve a very specific purpose.\nDetails The details element works as a container button, that once clicked hides or shows additional information, that can be personlized for different purposes. I can function similarly to notes, or it can function as a navigation link hub that links every header in the page. You are free to create your own \u0026ldquo;sub-markdown\u0026rdquo; inside it.\nThe basic syntax of a details box is \u0026lt;details \u0026quot;Title\u0026quot;\u0026gt;\u0026lt;/details\u0026gt;.\nBy default, details boxes initialize in a closed state. You can change that property with the open flag.\nAn example of the a details element would be:\nDetails example\rChoose the message you want to convey\u0026hellip;\nCreate code boxes if you wish to\u0026hellip;\n\u0026lt;div\u0026gt;\u0026lt;/div\u0026gt;\rOr navigate through the website with links.\nGo back to the top\nTabs Tabs are a good way of organizing your information when you have multiple forms of doing things. A perfect use for this element you\u0026rsquo;ll be instalation processes. Since often installing software depends on the OS, you can create a Tabs elements with tabs for each OS you need.\nAgain, doks gives you complete freedom to use these elements in which way you seem fit.\nTo use Tabs you should create a tabs element followed by the number of tab elements you want. You can associate a title for both the tabs element as well as the tab elements. The creation of a tab should be done as follows:\n\u0026lt;!--Don\u0026#39;t forget to encapsulate these HTML elements in {{ }} to use them in markdown--\u0026gt; \u0026lt;tabs \u0026#34;Tabs Body Title\u0026#34;\u0026gt; \u0026lt;!--You can create as many tab elements as you wish--\u0026gt; \u0026lt;tab \u0026#34;Tab Title\u0026#34;\u0026gt; Content of the tab \u0026lt;/tab\u0026gt; \u0026lt;/tabs\u0026gt;\rAn example of a Tabs element would be: C\u0026#43;\u0026#43;\rRust\rGo\rg++ main.cpp -o main ./main.exe\rrustc main.rs ./main.exe\rgo build main.exe\rLink Cards Link cards offers you a slick designed box with the function of a navigation link for both inside and outside links.\nThe Syntax to use these links are defined as \u0026lt;link-card title description href target\u0026gt;. Link cards require a title and a href attribute to be defined. Optionally, you can also set a description or other link attributes such as target.\nLink Card example\rLet\u0026#39;s go back to the top of the page with this\n\u0026lt;!--You can redirect the user to a website, another page or another header in the same page through the href--\u0026gt; \u0026lt;!--You can also have target=\u0026#34;_blank\u0026#34; if you want to open a new tab when the link card is clicked--\u0026gt; \u0026lt;link-card title=\u0026#34;Link Card example\u0026#34; description=\u0026#34;Let\u0026#39;s go back to the top of the page with this\u0026#34; href=#top\u0026gt;\rCard Grids As the name entices, card grids help you organize your link cards following an horizontal grid layout.\nThe syntax used is \u0026lt;card-grid\u0026gt;\u0026lt;/card-grid\u0026gt;, where card-grid can contain multiple link card elements, similar to what we saw at tabs.\nDoks Website\rGo to Link Cards\r\u0026lt;card-grid\u0026gt; \u0026lt;link-card title=\u0026#34;Doks Website\u0026#34; href=\u0026#34;https://getdoks.org/\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt; \u0026lt;link-card title=\u0026#34;Go to Link Cards\u0026#34; href=\u0026#34;#link-cards\u0026#34;\u0026gt; \u0026lt;/card-grid\u0026gt;\rHow this page was made The page makes use of the different topics already talked about.\nIt makes abundant abuse of code blocks, to make the documentation more pratical and more interactive with the user.\nIt also follows the website\u0026rsquo;s universal design guidelines, defined by the colors used, structure and sizes / weights.\nFinally is makes use of callouts to work primarily as notes for the user to take into account.\nApart from that, all the others elements were used for teaching purposes.\n","date":"2024-04-22","id":7,"permalink":"/docs/guides/customization/","summary":"This page is dedicated to show you the customization power of Doks. All of the features down below were used in the development of this website.","tags":[],"title":"Customization"},{"content":"","date":"2023-09-07","id":8,"permalink":"/docs/","summary":"","tags":[],"title":"Docs"},{"content":"","date":"2023-09-07","id":9,"permalink":"/privacy/","summary":"","tags":[],"title":"Privacy Policy"},{"content":"","date":"2023-09-07","id":10,"permalink":"/","summary":"","tags":[],"title":"Welcome to Doks"},{"content":"","date":"0001-01-01","id":11,"permalink":"/categories/","summary":"","tags":[],"title":"Categories"},{"content":"","date":"0001-01-01","id":12,"permalink":"/contributors/","summary":"","tags":[],"title":"Contributors"},{"content":"","date":"0001-01-01","id":13,"permalink":"/tags/","summary":"","tags":[],"title":"Tags"}]