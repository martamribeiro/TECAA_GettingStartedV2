[{"content":"","date":"2024-04-22","id":0,"permalink":"/pt-br/docs/starthere/sobre/","summary":"","tags":[],"title":"Sobre"},{"content":"","date":"2023-09-07","id":1,"permalink":"/pt-br/docs/starthere/","summary":"","tags":[],"title":"Comece Aqui"},{"content":"Nesta página, aprenderá os primeiros passos para criar seu primeiro site com o Hugo, usando o tema Doks.\nInstale o Hugo e Go Hugo Comece instalando o Hugo no seu dispositivo. Ao clicar neste link, pode verificar as diretrizes de instalação para macOS, LINUX, Windows, BSD e qualquer outra máquina que possa executar a cadeia de ferramentas do compilador Go.\nApós instalar o Hugo, deve executar o seguinte comando:\nWindows MAC choco install hugo-extended brew install hugo Em seguida, verifique a versão que está usando com o seguinte comando:\nhugo version\rGo Agora é hora de instalar o Go. Ao clicar neste link, pode instalar a versão do Go que preferir, para o seu sistema operacional.\nEm seguida, verifique a versão que está usando com o seguinte comando:\ngo version\rCrie o seu projeto Agora, terá de criar um novo projeto com o tema Doks.\nCrie um projeto novo A maneira recomendada de criar um novo projeto Hyas + Doks é executando o comando abaixo no seu terminal, no diretório onde deseja criar o seu projeto:\nnpm\rpnpm\rYarn\rnpm create hyas@latest -- --template doks\rpnpm create hyas@latest --template doks\ryarn create hyas@latest --template doks\rIsto criará um novo diretório de projeto com todos os arquivos e configurações necessárias para o seu site.\nInstale as dependências Faça cd para o diretório do seu novo projeto e instale as dependências antes de continuar.\nnpm\rpnpm\rYarn\rnpm install\rpnpm install\ryarn install\rVisualize o seu projeto Agora que criou o seu projeto, é hora de visualizá-lo. Ao trabalhar localmente, o servidor de desenvolvimento do Hugo permite visualizar o seu trabalho e atualiza automaticamente o seu navegador quando faz alterações. Dentro do diretório do seu projeto, execute o seguinte comando para iniciar o servidor de desenvolvimento:\nnpm\rpnpm\rYarn\rnpm run dev\rpnpm dev\ryarn dev\rIsso registrará uma mensagem no seu terminal com a URL da sua pré-visualização local. Abra essa URL para começar a navegar pelo seu site.\nParabéns, concluiu os primeiros passos para criar o seu primeiro website com o Hugo, utilizando o tema Doks!\nComo esta página foi feita Esta Chamada existe com o propósito de explicar como esta página foi criada, conforme solicitado para a disciplina de TECAA.\nCabeçalhos\rOs cabeçalhos foram estrategicamente utilizados em toda a página \u0026ldquo;Por Onde Começar\u0026rdquo; para delinear diferentes seções e orientar os leitores pelo processo de instalação.\nAo usar cabeçalhos como \u0026ldquo;Instalar o Hugo e Go\u0026rdquo;, \u0026ldquo;Crie o seu projeto\u0026rdquo; e \u0026ldquo;Visualize o seu projeto\u0026rdquo;, o conteúdo é logicamente organizado, tornando mais fácil para os utilizadores navegar e entender cada etapa envolvida na criação do seu primeiro site com o Hugo e o tema Doks.\nOs cabeçalhos são indicados por um ou mais símbolos de cardinal # seguidos por um espaço e o texto do cabeçalho. O número de símbolos de cardinal determina o nível do cabeçalho, com um símbolo de cardinal # representando o nível mais alto (H1), dois símbolos de cardinal ## representando o segundo nível (H2), e assim por diante.\nExemplo:\n# Header 1 ## Header 2 ### Header 3\rAbas\rAs abas foram utilizadas dentro dos passos de instalação para fornecer instruções separadas para diferentes gerenciadores de pacotes. Essa abordagem garante que os leitores possam acessar rapidamente as instruções relevantes para eles sem serem sobrecarregados por informações desnecessárias.\nAs abas são implementadas usando shortcodes. Elas permitem que os usuários alternem entre diferentes conjuntos de informações dentro de uma única seção de conteúdo.\nExemplo:\nTabelas\rAs tabelas foram incorporadas para apresentar comandos de instalação para diferentes sistemas operacionais. As tabelas permitem uma comparação fácil entre as opções de instalação, permitindo que os usuários escolham o método que melhor se adapta às suas preferências e requisitos.\nTabelas são criadas usando símbolos de barra vertical | para separar colunas e hífens - para definir os cabeçalhos da tabela. Cada linha representa uma entrada separada na tabela, com células separadas por símbolos de barra vertical.\nExemplo:\n| Windows | MAC | | :----: | :----: | | ``` choco install hugo-extended``` | ``` brew install hugo``` |\rHiperligações\rHiperligações foram inseridas estrategicamente em toda a página para fornecer acesso fácil a recursos externos e documentação relevante. Ao incluir hiperligações para a página de instalação oficial do Hugo e a página de download do Go, os utilizadores podem acessar rapidamente informações adicionais e recursos para ajudá-los no processo de instalação.\nHiperligações são criadas usando a sintaxe [link text](URL), onde o texto do link representa o texto clicável exibido para os usuários e a URL especifica o destino.\nExemplo:\n[neste link](https://gohugo.io/installation/)\rBlocos de Código\rBlocos de código foram usados para exibir comandos. Ao apresentar comandos de uma maneira estruturada e formatada, os utilizadores podem identificá-los e executá-los facilmente. Além disso, os blocos de código permitem copiar e colar facilmente, permitindo que os utilizadores repliquem os comandos com precisão e eficiência.\nBlocos de código são delimitados por três crases (```).\nExemplo:\nChamada\rNo final da página, uma Chamada foi incluída para explicar como a página foi criada. Esta Chamada fornece informações importantes que podem ser úteis para os utilizadores quando começarem a trabalhar em suas próprias páginas.\nChamadas são implementadas usando shortcodes personalizados. Elas são usadas para chamar a atenção para informações específicas ou fornecer contexto adicional.\nExemplo:\nFiguras\rNa seção de chamadas, figuras foram incluídas para representar visualmente exemplos de como diferentes elementos foram implementados na página \u0026ldquo;Por Onde Começar\u0026rdquo;, especialmente aqueles que não puderam ser inseridos dentro de blocos de código, por questões de formatação.\nExemplo:\nAo incorporar estrategicamente cabeçalhos, abas, tabelas, hiperlinks, blocos de código, chamadas e figuras ao longo da página \u0026ldquo;Por Onde Começar\u0026rdquo;, o conteúdo é organizado, apresentado e explicado de forma eficaz aos utilizadores. Cada elemento serve a um propósito específico ao orientar os utilizadores pelo processo de instalação e fornecer as informações e recursos necessários para criar seu primeiro site com Hugo e o tema Doks.\n","date":"2024-04-23","id":2,"permalink":"/pt-br/docs/starthere/por-onde-come%C3%A7ar/","summary":"Nesta página, aprenderá os primeiros passos para criar seu primeiro site com o Hugo, usando o tema Doks.\nInstale o Hugo e Go Hugo Comece instalando o Hugo no seu dispositivo.","tags":[],"title":"Por Onde Começar"},{"content":" Pronto para construir e implantar seu site Doks? Siga um dos guias disponíveis no HyasDocs para diferentes serviços de implantação ou dê scroll para baixo para obter orientações gerais sobre como implantar um site Hyas.\nGuias de Implantação Netlify\rVercel\rGitHub Pages\rGitLab Pages\rCloudflare Pages\rFirebase Hosting\rMicrosoft Azure\rRender\rOpções de Implantação Rápida Você pode construir e implantar um site Hyas (incluindo um tema Doks) em vários hosts rapidamente usando o painel de controle do site ou um CLI.\nInterface do Website Uma maneira rápida de implantar o seu site é conectar o repositório Git online do seu projeto Hyas (por exemplo, GitHub, GitLab, Bitbucket) a um provedor de hospedagem (host) e aproveitar a implantação contínua usando Git.\nEstas plataformas de hospedagem detectam automaticamente os envios para o repositório de origem do seu projeto Hyas, constroem seu site e o implantam na web em um URL personalizado ou em seu domínio pessoal. Frequentemente, configurar uma implantação nestas plataformas seguirá etapas semelhantes às seguintes:\nAdicione seu repositório a um provedor Git online (por exemplo, no GitHub, GitLab, Bitbucket).\nEscolha um host que suporte implantação contínua (e.g. Netlify ou Vercel) e importe seu repositório Git como um novo site/projeto. Muitos hosts comuns reconhecerão seu projeto como um site Hyas e devem escolher as configurações apropriadas para construir e implantar seu site, como mostrado abaixo. (Caso contrário, essas configurações podem ser alteradas.)\nConfigurações de Implantação\nComando de Construção: hyas build ou npm run build Diretório de Publicação: public Clique em \u0026ldquo;Implantar\u0026rdquo; e seu novo site será criado em um URL único para esse host (e.g. new-hyas-site.netlify.app). O host será automaticamente configurado para observar a branch principal do seu provedor Git em busca de alterações e reconstruir e republicar seu site a cada novo commit. Essas configurações geralmente podem ser configuradas no painel de controle do seu provedor de hospedagem.\nImplantação via CLI Alguns hosts terão sua própria interface de linha de comando (CLI) que você pode instalar globalmente em sua máquina usando o npm. Geralmente, usar uma CLI para implantar se parece com o seguinte:\nInstale a CLI do seu host globalmente, por exemplo: npm\rpnpm\rYarn\rnpm install --global netlify-cli\rpnpm add --global netlify-cli\ryarn global add netlify-cli\rExecute a CLI e siga quaisquer instruções para autorização, configuração etc.\nConstrua seu site e implante no seu host\nMuitos hosts comuns irão construir e implantar seu site para você. Eles geralmente reconhecerão seu projeto como um site Hyas e devem escolher as configurações apropriadas de configuração para construir e implantar conforme mostrado abaixo. (Se não, essas configurações podem ser alteradas.)\nConfigurações de Implantação\nComando de Construção: hyas build or npm run build Diretório de Publicação: public Outros hosts exigirão que você construa seu site localmente e implante usando a linha de comando.\nConstruindo Seu Site Localmente Muitos hosts, como Netlify e Vercel, construirão seu site para você e, em seguida, publicarão essa saída de construção na web. No entanto, alguns sites exigirão que você construa localmente e, em seguida, execute um comando de implantação ou faça upload da saída de construção.\nVocê também pode desejar construir localmente para visualizar seu site ou para identificar quaisquer erros e avisos em seu próprio ambiente.\nExecute o comando npm run build para construir seu site Hyas.\nnpm\rpnpm\rYarn\rnpm run build\rpnpm run build\ryarn run build\rPor padrão, a saída de construção será colocada em public/. Essa localização pode ser alterada usando a opção de configuração publishDir..\nVisualizando Seu Site Localmente Ao lado do servidor de desenvolvimento integrado do Hugo, o Hyas vem com o http-server, um servidor HTTP estático simples e sem configuração.\nExecute o comando npm run preview para visualizar seu site Hyas.\nnpm\rpnpm\rYarn\rnpm run preview\rpnpm run preview\ryarn run preview\rO script http-server sé configurado para ser executado com gzip, brotli, e CORS habilitados. Essas configurações podem ser alteradas usando as opções disponíveis.\nComo esta página foi feita\nEste Callout existe com o propósito de explicar como esta página foi criada, conforme solicitado para a disciplina de TECAA.\nSeções do Documento Como pode ser visto na Tabela de Conteúdos disponível no lado esquerdo da página, este documento está dividido em várias seções. Isso pode ser alcançado em nosso Tema Doks usando cabeçalhos markdown, adicionando # antes do texto que desejo tornar um Cabeçalho. Quanto mais # adicionados antes de um texto, define seu tipo. Por exemplo, # Header1 define um cabeçalho h1, ## Header2 define um cabeçalho h2, e assim por diante. Nesta página, foi feito o seguinte:\n## Deployment Guides {#section-1} ## Quick Deploy Options {#section-2} ### Website UI {#section-2.1} ### CLI Deployment {#section-2.2} ## Building Your Site Locally {#section-3} ## Previewing Your Site Locally {#section-4}\rPara cada seção, também foi definido um {section-x}. Isso foi implementado para poder referenciar essas seções em hiperlinks, para serem exploradas mais adiante.\nQuebras Temáticas (Linhas Horizontais) Para criar uma linha horizontal para dividir o conteúdo da página ou mesmo o Cabeçalho do texto, como pode ser visto logo após o Título principal da página, pode-se usar três ou mais hífens consecutivos, sublinhados ou asteriscos. Para esta página, --- (três hífens consecutivos) foram usados para criar as quebras temáticas, como a seguinte:\nTexto em Negrito Para o texto que pode ser visto em negrito, no meio das frases, isso pode ser alcançado colocando ** antes e depois do texto desejado em negrito. Por exemplo, este está em negrito ao fazer **este**.\nLink Cards Para criar a Development Guides section Link-Cards e Card-Grids foram usados. Esta é a funcionalidade que nossa equipa apresentou no Hands-On para TECAA. Cada linha de Link-Cards foi criada usando Card-Grids, e cada coluna dessa linha criada usando Link-Cards, como pode ser visto aqui:\nHiperligações Todas as hiperligações encontradas nesta página foram feitos usando o que é padrão para arquivos markdown, [Link texto](URL). Aqui, as hiperligações foram usadas de duas maneiras diferentes:\nPara redirecionar para outra página ou site, por exemplo, para a Documentação do Hyas, o seguinte foi feito:\n[Netlify](https://docs.gethyas.com/guides/deploy/netlify/)\nPara redirecionar para uma seção dentro desta página, o texto adicionado aos títulos, {section-x}, foi usado:\n[preview your site](#section-4)\nListas Esta página apresenta dois tipos diferentes de listas, ordenadas e não ordenadas. Para criar as listas ordenadas, presentes em muitas das seções desta página, o seguinte foi feito:\n1. Item 1 2. Item 2 3. Item 3\rPara criar as listas não ordenadas, em vez de usar números seguidos de um ponto, um hífen foi usado, assim como acontece nos arquivos markdown:\n- Item 1 - Item 2 - Item 3\rCallouts O uso de Callouts foi uma ideia trazida de um Hands-On apresentado por outra equipa de TECAA. Embora os Callouts não sejam criados da mesma forma neste site com tema Doks, eles fazem o mesmo e parecem semelhantes. Para criar os Callouts usados nesta página, incluindo o usado para esta seção, o seguinte foi feito:\nAo alterar os seus atributos podemos criar outros tipos de Callouts, alterando a sua cor, título e até mesmo o ícone associado, como pode ser visto nos exemplos abaixo:\nFormatação de Código Inline Ao longo desta página, podem ser vistos dois tipos diferentes de formatação para destacar comandos e códigos bash.\nPara pequenos trechos de código ou comandos que desejo exibir no meio de uma frase, usei ´ entre o texto para formatar. Por exemplo, para obter npm run preview, fiz o seguinte com backticks:\n´npm run preview´\rPara pedaços maiores de código ou comandos e para criar uma caixa maior como pode ser visto no exemplo acima, existem dois estilos diferentes que podem ser implementados. Para criar uma caixa semelhante a uma linha de comando bash, fiz o seguinte usando três backticks:\n```bash Text Here ```\rThis results in:\nText Here\rPara criar uma caixa que se assemelhe e funcione como um arquivo markdown, como a que estou usando aqui, substituí a opção \u0026ldquo;bash\u0026rdquo; na fórmula por \u0026ldquo;markdown\u0026rdquo;:\n```markdown Text Here ```\rResultando em:\nText Here\rAbas As abas foram usadas ao longo da página para mostrar os mesmos comandos para diferentes terminais (linhas de comando). Para criar as abas, usei os shortcodes \u0026ldquo;tabs\u0026rdquo; e \u0026ldquo;tab\u0026rdquo;, como pode ser visto no seguinte exemplo:\nImages As imagens usadas ao longo da página e no restante do site estão armazenadas na pasta de \u0026ldquo;assets\u0026rdquo; de nosso projeto:\nO arquivo module.toml acompanha a pasta de \u0026ldquo;assets\u0026rdquo;:\nIAs imagens foram usadas apenas nesta página na seção atual para mostrar linhas de código. As imagens foram implementadas da forma que pode ser vista aqui:\n","date":"2024-04-22","id":3,"permalink":"/pt-br/docs/starthere/implanta%C3%A7%C3%A3o/","summary":"Pronto para construir e implantar seu site Doks? Siga um dos guias disponíveis no HyasDocs para diferentes serviços de implantação ou dê scroll para baixo para obter orientações gerais sobre como implantar um site Hyas.","tags":[],"title":"Implantação"},{"content":"","date":"2024-04-22","id":4,"permalink":"/pt-br/docs/guides/","summary":"","tags":[],"title":"Guias"},{"content":"Esta página é dedicada a mostrar-te o poder da personalização do Doks. Todas as funcionalidades abaixo foram usadas no desenvolvimento deste site. Podes também visitar a Documentação do Doks para obter mais informações e recursos disponíveis que não acabamos por ulilizar.\nComo o Doks é um tema ainda em desenvolvimento, os recursos de documentação ainda são bastante escassos.\nO sistema Doks A personalização no Doks é feita através da pasta assets/scss, disponíveis após o primeiro build feito do projeto:\n_variables.scss: Como o nome sugere, este ficheiro é usado para declarações de variáveis para posterior uso e também para evitar a repetição de estilos no ficheiro principal de personalização. O Doks já traz consigo algumas variáveis personalizadas como $primary, mas dá a liberdade de criar variáveis personalizadas ao utilizador. _custom.scss: Este é o ficheiro principal para definição dos estilos personalizados. Tanto convenções CSS e SCSS são suportadas. Além disso, ele também tem acesso às variáveis criadas e presentes no ficheiro _variable.scss. O Doks também permite a criação de ficheiros .scss adicionais que podem ser acoplados a este ficheiro principal. O Doks permite override de qualquer varíavel existence no styles.\nFontes O Doks permite personalização básica de fontes como o tipo de fonte e o peso/tamanho associado aos diferentes elementos presentes nas páginas. O tema faz uso de dois métodos para definição de fontes:\nFontes do sistema Fontes do Google Fontes do sistema O uso de fontes do sistema (system fonts) garante um carregamento mais rápido da documentação, pois não requer tempo e largura de banda extras para baixar ficheiros externos de fonte.\nPara adicionar system fonts ao projeto, basta adiciona-las ao ficheiro assets/scss/common/_variables-custom.scss:\n// Escolher todas as fontes reconhecíveis pelo Doks aquando deployment $font-family-sans-serif: \u0026#34;Noto Sans\u0026#34;, \u0026#34;Liberation Sans\u0026#34;, Arial, sans-serif;\rFontes do Google Como alternativa ao uso de fontes do sistema, Doks oferece o use de fontes do google (Google Fonts). O procedimento recomendado para o devido uso de google fonts será hospedar as fontes no próprio projeto com ferramentas como o google-webfonts-helper ou Fontsource.\nNormalmente, as Fontes do Google oferecem uma variedade maior de opções para cada fonte disponível. Varíaveis como o peso de fonte inicial, tipo de fonte (com serifa ou sem), tipo de conjunto de caracteres e muito mais. As Fontes do Google oferecem mais controle desde o início em comparação com as fontes do sistema, que estão limitadas ao que está instalado e carregado previamente.\nPor exemplo, tentemos usar a fonte \u0026ldquo;Montserrat\u0026rdquo;:\nVisite o google-webfonts-helper e selecione Montserrat. Há uma boa quantidade de escolhas disponíveis. Por agora seguimos com \u0026ldquo;latino\u0026rdquo; como charset, \u0026ldquo;regular\u0026rdquo; e \u0026ldquo;500\u0026rdquo; como peso. Copie o CSS (usando apenas o prefixo /fonts/montserrat) e cole no assets/scss/common/_custom.scss: // Altera o peso da fonte consoante o pretendido. /* montserrat500-regular - latin */ @font-face { font-display: swap; /* https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/font-display para mais opções. */ font-family: \u0026#39;Montserrat\u0026#39;; font-style: normal; font-weight: 500; // mudar url para a localização onde a fonte irá ser guardada src: url(\u0026#39;../fonts/montserrat-v26-latin-regular.woff2\u0026#39;) format(\u0026#39;woff2\u0026#39;); /* Chrome 36+, Opera 23+, Firefox 39+, Safari 12+, iOS 10+ */ }\rBaixa os arquivos, extraia-os e copia as fontes em static/fonts/montserrat/ Adicione a fonte a assets/scss/common/_variable-custom.scss: // Escolher todas as fontes reconhecíveis pelo Doks aquando deployment $font-family-sans-serif: \u0026#34;Montserrat\u0026#34;, \u0026#34;Noto Sans\u0026#34;, \u0026#34;Liberation Sans\u0026#34;, Arial, sans-serif;\rPré-carregue as fontes para evitar problemas de Cumulative Layout Shift: copie para node_modules/@hyas/doks-core/layouts/partials/head/resource-hints.html para layouts/partials/head/resource-hints.html e adicione a fonte: \u0026lt;link rel=\u0026#34;preload\u0026#34; href=\u0026#34;{{ \u0026#34;fonts/montserrat/montserrat-v26-latin-regular.woff2\u0026#34; | absURL }}\u0026#34; as=\u0026#34;font\u0026#34; type=\u0026#34;font/woff2\u0026#34; crossorigin\u0026gt; \u0026lt;link rel=\u0026#34;preload\u0026#34; href=\u0026#34;{{ \u0026#34;fonts/montserrat/montserrat-v26-latin-500.woff2\u0026#34; | absURL }}\u0026#34; as=\u0026#34;font\u0026#34; type=\u0026#34;font/woff2\u0026#34; crossorigin\u0026gt;\rTamanho da fonte O Doks possui uma boa quantidade de variáveis personalizadas para uso imediato, mas ainda dá o poder de criação de estilos personalizados que podem ser escritos em SCSS ou CSS. Podemos usar os poderes do Doks para facilitar o desenvolvimento e manter um tema de design consistente para as páginas do website.\nComo mencionado anteriormente, podes definir variáveis para o tamanho da fonte no ficheiro _variables-custom.scss, ou simplesmente escrever diretamente no _custom.scss.\nUm exemplo simples seria:\n// set ao tamanho da fonte normal :root { --base-font-size: 1.5rem; }\r// tamanho de h1 com base na variável definida em _variables-custom.scss h1 { font-size: calc(var(--base-font-size) + 1.5vw); } // tamanho de h2 definido diretamente h2 { font-size: 2rem; }\rAs fontes normalmente vêm com valores de peso específicos, como Fontes do Google menciona. Ainda assim, o Doks permite alterações ao peso da fonte com CSS simples:\n// mudar o peso da fonte atual :root { font-weight: 700; // mudar para o peso pretendido }\rTema de cores Editar o tema de cores no Doks acaba por possuir o mesmo funcionamento já falado anteriormente, ou seja, definição de varíaveis em _variables-custom.scss e definição de styles no ficheiro custom.scss.\nAssim como a personalização de fontes, podes definir variáveis predefinidas que ajudam a manter uma aparência consistente. O tema do Doks já vem com variáveis predefinidas que também podes usar em conjunto com as tuas próprias variáveis:\n// mudar cor de link quando se passa o rato sobre um link a:hover { color: #b5dec8; }\rTens total liberdade para o que mudar o que desejares. Mais ainda, incetivamos que explores e experimentes com as diferentes capacidades de customização do doks.\nVerifique seu HTML\nVerifica o arquivo HTML gerado quando desejares alterar uma parte muito específica do documento do doks. Junto com o material de escrita, o HTML também contém todas as classes que ele usa para os styles. Usa essas classes para desvendar ainda mais poderes de customização.\nShortcodes O Doks suporta o uso de shortcodes nos seus Markdowns.\nShortcodes são uma maneira simples de incorporar HTML com Markdown. Para usar um shortcode, encapsula o elemento HTML desejado dentro de {{}}.\nOs shortcodes podem oferecer uma variedade de funcionalidades, embora o doks os use principalmente como links de navegação.\nExistem muitos tipos de shortcodes específicos, que cobriremos neste guia.\nPodes seguir um guia mais detalhado de shortcodes em Doks: Shortcodes.\nCallouts Os Callouts são usados para fornecer informações adicionais, como notas ou avisos que o usuário deve levar em consideração.\nOs destaques podem ser criados com tags de title, context e icon. Os callouts dividem-se em quatro diferentes contextos: note, tip, warning e caution.\nNote\nUsado para notas adicionais.\nTip\nUsado para dicas extras interessantes que você possa querer dar\nCaution\nAlerta o usuário sobre um possível bug ou obstáculo.\nDanger\nAlerta o usuário sobre possível problema.\nA sintaxe básica para callouts expressa-se como:\n\u0026lt;callout context title icon\u0026gt;\u0026lt;/callout\u0026gt;\rO doks permite uma personalização completa destes elementos se desejado. Porém, visto que estes elementos possuem situações de uso bastante específicas, alterações grandes aos estilos dos mesmos não é recomendável.\nDetails O elemento de details funciona como um container clicável, que quando clicado oculta ou mostra informações adicionais, que podem ser personalizadas para diferentes fins. Pode funcionar de forma semelhante a notas, ou pode funcionar como um hub de links de navegação que vincula todos os cabeçalhos na página. É até mesmo possível criar um \u0026ldquo;mini-markdown\u0026rdquo; dentro destes elementos. A decisão do que colocar nos diversos elementos do doks é deixada à liberdade do utilizador.\nA sintaxe básica de um elemento de details é \u0026lt;details \u0026quot;Título\u0026quot;\u0026gt;\u0026lt;/details\u0026gt;.\nPor padrão, os elementos details inicializam em um estado fechado. Podes alterar essa propriedade através da flag open.\nUm exemplo de um elemento de details seria:\nExemplo de Details\rEscolhe a mensagem que desejas transmitir\u0026hellip;\nCria caixas de código se desejar\u0026hellip;\n\u0026lt;div\u0026gt;\u0026lt;/div\u0026gt;\rOu navegua pelo site com links.\nVolte ao topo\nTabs As tabs são uma boa maneira de organizar informações quando precisamos de diferenciar algum texto ou código por exemplo. Um uso perfeito para esse elemento serão processos de instalação. Como frequentemente a instalação de software depende do sistema operacional, podes criar um elemento de tabs com abas para cada sistema operativo que precises.\nNovamente, o doks dá total liberdade ao uso destes elementos.\nPara usar tabs, deves criar um elemento tabs seguido pelo número de elementos tab desejados. Podes associar um título tanto para o elemento tabs quanto para os elementos tab. A criação de tabs deve ser feita da seguinte forma:\n\u0026lt;!--Não te esqueças de encapsular os elemento abaixo dentro de {{}} nos teus markdowns--\u0026gt; \u0026lt;tabs \u0026#34;Tabs Body Title\u0026#34;\u0026gt; \u0026lt;!--Podes criar a quantidade de elementos tab que desejares--\u0026gt; \u0026lt;tab \u0026#34;Tab Title\u0026#34;\u0026gt; Content of the tab \u0026lt;/tab\u0026gt; \u0026lt;/tabs\u0026gt;\rUm exemplo de um elemento de tabs seria: C\u0026#43;\u0026#43;\rRust\rGo\rg++ main.cpp -o main ./main.exe\rrustc main.rs ./main.exe\rgo build main.exe\rLink Cards Os Link Cards oferecem uma forma elegante de design para links de navegação, tanto para links externos como internos.\nA sintaxe para usar esses links é definida como \u0026lt;link-card title description href target\u0026gt;. Os link cards requerem que sejam definidos os atributos title e href. Opcionalmente, também podes definir uma descrição (atributo description) ou outros atributos normais de um link como target.\nLink Card example\rLet\u0026#39;s go back to the top of the page with this\n\u0026lt;!--Podes redirecionar o utlizador tanto para headers dentro da página, como para outro página do website ou para outro site por completo--\u0026gt; \u0026lt;!--Ao colocar o atributo target como \u0026#39;_blank\u0026#39;, faz com que quando o utilizor clicar no link card, uma nova aba do browser seja aberta--\u0026gt; \u0026lt;link-card title=\u0026#34;Link Card example\u0026#34; description=\u0026#34;Let\u0026#39;s go back to the top of the page with this\u0026#34; href=#top\u0026gt;\rCard Grids Como o nome sugere, as card grids ajudam na organização de link cards seguindo um layout de grid horizontal.\nA sintaxe usada é \u0026lt;card-grid\u0026gt;\u0026lt;/card-grid\u0026gt;, onde card-grid pode conter vários elementos do tipo link-card, semelhante ao que vimos em Tabs.\nDoks Website\rGo to Link Cards\r\u0026lt;card-grid\u0026gt; \u0026lt;link-card title=\u0026#34;Doks Website\u0026#34; href=\u0026#34;https://getdoks.org/\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt; \u0026lt;link-card title=\u0026#34;Go to Link Cards\u0026#34; href=\u0026#34;#link-cards\u0026#34;\u0026gt; \u0026lt;/card-grid\u0026gt;\rComo esta página foi feita A página faz uso dos diferentes tópicos já discutidos.\nEla faz uso abundante de blocos de código, para tornar a documentação mais prática e mais interativa com o usuário.\nTambém segue as diretrizes de design universal do site, definidas pelas cores utilizadas, estrutura e tamanhos/pesos.\nFinalmente, ela faz uso de callouts para funcionar principalmente como notas para o usuário levar em consideração.\nAlém disso, todos os outros elementos foram usados para fins de ensino.\n","date":"2024-04-18","id":5,"permalink":"/pt-br/docs/guides/customiza%C3%A7%C3%A3o/","summary":"Esta página é dedicada a mostrar-te o poder da personalização do Doks. Todas as funcionalidades abaixo foram usadas no desenvolvimento deste site.","tags":[],"title":"Customização"},{"content":"","date":"2023-09-07","id":6,"permalink":"/pt-br/docs/","summary":"","tags":[],"title":"Docs"},{"content":"","date":"2023-09-07","id":7,"permalink":"/pt-br/privacy/","summary":"","tags":[],"title":"Política de Privacidade"},{"content":"","date":"2023-09-07","id":8,"permalink":"/pt-br/","summary":"","tags":[],"title":"Bem-vindo ao Doks"},{"content":"","date":"0001-01-01","id":9,"permalink":"/pt-br/categories/","summary":"","tags":[],"title":"Categories"},{"content":"","date":"0001-01-01","id":10,"permalink":"/pt-br/contributors/","summary":"","tags":[],"title":"Contributors"},{"content":"","date":"0001-01-01","id":11,"permalink":"/pt-br/tags/","summary":"","tags":[],"title":"Tags"}]